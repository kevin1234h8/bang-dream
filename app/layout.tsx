"use client";

import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { useState, useRef, useEffect } from "react";
import MusicIcon from "@/assets/music-next.svg";
import Image from "next/image";
import PlayIcon from "@/assets/play.svg";
import PauseIcon from "@/assets/pause.svg";
import mp3File from "@/assets/Returns.mp3";
import MusicTracker from "@/assets/music-tracker.svg";
import Yume from "@/assets/yume.mp3";
import MiraiTrain from "@/assets/mirai-train.mp3";
import TwitterIcon from "@/assets/twitter.svg";
import LineIcon from "@/assets/line.svg";
import YoutubeIcon from "@/assets/youtube.svg";
import InstagramIcon from "@/assets/instagram.svg";
import BangDreamLogo from "@/assets/bang-dream-logo.png";
import BeforeIRise from "@/assets/Before I Rise Acoustic Ver.mp3";
import datas from "@/data/data.json";
import { useRouter } from "next/router";
import Navbar from "@/components/Navbar";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Bang Dream",
  description: "Generated by create next app",
};

type MusicPlaying = {
  title: string;
  artist: string;
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isHamburgerOpen, setIsHamburgerOpen] = useState<boolean>(false);
  const [isMusicContainerOpen, setIsMusicContainerOpen] =
    useState<boolean>(false);
  const [isMusicTracklistOpen, setIsMusicTracklistOpen] =
    useState<boolean>(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isYumeMusicPlaying, setIsYumeMusicPlaying] = useState<boolean>(false);
  const [isMiraiTrainMusicPlaying, setIsMiraiTrainMusicPlaying] =
    useState<boolean>(false);
  const audioRef = useRef<any>(null);
  const yumeAudioRef = useRef<any>(null);
  const miraiTrainAudioRef = useRef<any>(null);
  const [activeMenu, setActiveMenu] = useState<string>("home");
  const [musicPlaying, setMusicPlaying] = useState<MusicPlaying>({
    title: "Returns",
    artist: "Poppin Party",
  });
  useEffect(() => {
    const url = window.location.pathname;
    var pathArray = url.split("/");
    const pathSegments = url.split("/").filter((segment) => segment);
    const character = pathSegments[0];
    if (character === "") {
      setActiveMenu("");
    } else {
      setActiveMenu(character);
    }

    // Split the URL by '/' and filter out empty segments

    // The "character" part is the first non-empty segment
  }, []);
  console.log(activeMenu);
  const togglePlay = () => {
    const audioElement = audioRef.current;

    if (isPlaying) {
      audioElement.pause();
      setIsPlaying(false);
    } else {
      // Pause Yume music and reset its state
      const yumeAudioElement = yumeAudioRef.current;
      const miraiTrainAudioElement = miraiTrainAudioRef.current;

      if (isMiraiTrainMusicPlaying) {
        miraiTrainAudioElement.pause();
        miraiTrainAudioElement.currentTime = 0;
        setIsMiraiTrainMusicPlaying(false);
      }
      if (isYumeMusicPlaying) {
        yumeAudioElement.pause();
        yumeAudioElement.currentTime = 0;
        setIsYumeMusicPlaying(false);
      }

      audioElement.play();
      setIsPlaying(true);
    }

    setMusicPlaying({
      title: "Returns",
      artist: "Poppin Party",
    });
  };

  const toggleYumeMusicPlay = () => {
    const audioElement = yumeAudioRef.current;

    if (isYumeMusicPlaying) {
      audioElement.pause();
      setIsYumeMusicPlaying(false);
    } else {
      const returnsAudioElement = audioRef.current;
      const miraiTrainAudioElement = miraiTrainAudioRef.current;
      if (isMiraiTrainMusicPlaying) {
        miraiTrainAudioElement.pause();
        miraiTrainAudioElement.currentTime = 0;
        setIsMiraiTrainMusicPlaying(false);
      }
      if (isPlaying) {
        returnsAudioElement.pause();
        returnsAudioElement.currentTime = 0;
        setIsPlaying(false);
      }

      audioElement.play();
      setIsYumeMusicPlaying(true);
    }

    setMusicPlaying({
      title: "夢を撃ち抜く瞬間に！",
      artist: "Poppin Party",
    });
  };

  const toggleMiraiTrainMusicPlay = () => {
    const audioElement = miraiTrainAudioRef.current;

    if (isMiraiTrainMusicPlaying) {
      audioElement.pause();
      setIsMiraiTrainMusicPlaying(false);
    } else {
      // Pause "Returns" music and reset its state
      const returnsAudioElement = audioRef.current;
      const yumeAudioElement = yumeAudioRef.current;

      if (isYumeMusicPlaying) {
        yumeAudioElement.pause();
        yumeAudioElement.currentTime = 0; // Reset the currentTime
        setIsYumeMusicPlaying(false);
      }
      if (isPlaying) {
        returnsAudioElement.pause();
        returnsAudioElement.currentTime = 0; // Reset the currentTime
        setIsPlaying(false);
      }

      audioElement.play();
      setIsMiraiTrainMusicPlaying(true);
    }

    setMusicPlaying({
      title: "Before I Rise",
      artist: "⿇枝 准 x XAI",
    });
  };

  const handleOpenMusicTracklist = () => {
    setIsMusicTracklistOpen(true);
  };

  const handleCloseMusicTracklist = () => {
    setIsMusicTracklistOpen(false);
  };

  const musicTitles = ["Returns", "夢を撃ち抜く瞬間に！", "Before I Rise"];

  const getNextMusicTitle = (currentTitle: string) => {
    const currentIndex = musicTitles.indexOf(currentTitle);
    console.log("currentIndex", currentIndex);
    const nextIndex = (currentIndex + 1) % musicTitles.length;
    console.log("nextIndex", nextIndex);
    return musicTitles[nextIndex];
  };

  const handleNextMusic = () => {
    const nextMusic = getNextMusicTitle(musicPlaying.title);
    const returnsAudioElement = audioRef.current;
    const yumeAudioElement = yumeAudioRef.current;
    const miraiTrainAudioElement = miraiTrainAudioRef.current;

    setMusicPlaying({
      title: nextMusic,
      artist: musicPlaying.artist,
    });

    if (nextMusic === "Returns") {
      returnsAudioElement.play();

      if (isPlaying) {
        returnsAudioElement.pause();
        setIsPlaying(false);
      } else {
        // Pause Yume music and reset its state
        const yumeAudioElement = yumeAudioRef.current;
        const miraiTrainAudioElement = miraiTrainAudioRef.current;

        if (isMiraiTrainMusicPlaying) {
          miraiTrainAudioElement.pause();
          miraiTrainAudioElement.currentTime = 0;
          setIsMiraiTrainMusicPlaying(false);
        }
        if (isYumeMusicPlaying) {
          yumeAudioElement.pause();
          yumeAudioElement.currentTime = 0;
          setIsYumeMusicPlaying(false);
        }

        returnsAudioElement.play();
        setIsPlaying(true);
      }
    } else if (nextMusic === "夢を撃ち抜く瞬間に！") {
      if (isYumeMusicPlaying) {
        yumeAudioElement.pause();
        setIsYumeMusicPlaying(false);
      } else {
        const returnsAudioElement = audioRef.current;
        const miraiTrainAudioElement = miraiTrainAudioRef.current;
        if (isMiraiTrainMusicPlaying) {
          miraiTrainAudioElement.pause();
          miraiTrainAudioElement.currentTime = 0;
          setIsMiraiTrainMusicPlaying(false);
        }
        if (isPlaying) {
          returnsAudioElement.pause();
          returnsAudioElement.currentTime = 0;
          setIsPlaying(false);
        }

        yumeAudioElement.play();
        setIsYumeMusicPlaying(true);
      }
    } else if (nextMusic === "Before I Rise") {
      if (isMiraiTrainMusicPlaying) {
        miraiTrainAudioElement.pause();
        setIsMiraiTrainMusicPlaying(false);
      } else {
        // Pause "Returns" music and reset its state
        const returnsAudioElement = audioRef.current;
        const yumeAudioElement = yumeAudioRef.current;

        if (isYumeMusicPlaying) {
          yumeAudioElement.pause();
          yumeAudioElement.currentTime = 0; // Reset the currentTime
          setIsYumeMusicPlaying(false);
        }
        if (isPlaying) {
          returnsAudioElement.pause();
          returnsAudioElement.currentTime = 0; // Reset the currentTime
          setIsPlaying(false);
        }

        miraiTrainAudioElement.play();
        setIsMiraiTrainMusicPlaying(true);
      }
    }
  };

  const getPreviousMusicTitle = (currentTitle: string) => {
    const currentIndex = musicTitles.indexOf(currentTitle);
    console.log("currentIndex", currentIndex);
    console.log("lenght :", musicTitles.length);
    const previousIndex =
      (currentIndex - 1 + musicTitles.length) % musicTitles.length;
    console.log("nextIndex", previousIndex);
    return musicTitles[previousIndex];
  };

  const handlePreviousMusic = () => {
    const previousMusic = getPreviousMusicTitle(musicPlaying.title);
    const returnsAudioElement = audioRef.current;
    const yumeAudioElement = yumeAudioRef.current;
    const miraiTrainAudioElement = miraiTrainAudioRef.current;

    setMusicPlaying({
      title: previousMusic,
      artist: musicPlaying.artist,
    });

    if (previousMusic === "Returns") {
      returnsAudioElement.play();

      if (isPlaying) {
        returnsAudioElement.pause();
        setIsPlaying(false);
      } else {
        // Pause Yume music and reset its state
        const yumeAudioElement = yumeAudioRef.current;
        const miraiTrainAudioElement = miraiTrainAudioRef.current;

        if (isMiraiTrainMusicPlaying) {
          miraiTrainAudioElement.pause();
          miraiTrainAudioElement.currentTime = 0;
          setIsMiraiTrainMusicPlaying(false);
        }
        if (isYumeMusicPlaying) {
          yumeAudioElement.pause();
          yumeAudioElement.currentTime = 0;
          setIsYumeMusicPlaying(false);
        }

        returnsAudioElement.play();
        setIsPlaying(true);
      }
    } else if (previousMusic === "夢を撃ち抜く瞬間に！") {
      if (isYumeMusicPlaying) {
        yumeAudioElement.pause();
        setIsYumeMusicPlaying(false);
      } else {
        const returnsAudioElement = audioRef.current;
        const miraiTrainAudioElement = miraiTrainAudioRef.current;
        if (isMiraiTrainMusicPlaying) {
          miraiTrainAudioElement.pause();
          miraiTrainAudioElement.currentTime = 0;
          setIsMiraiTrainMusicPlaying(false);
        }
        if (isPlaying) {
          returnsAudioElement.pause();
          returnsAudioElement.currentTime = 0;
          setIsPlaying(false);
        }

        yumeAudioElement.play();
        setIsYumeMusicPlaying(true);
      }
    } else if (previousMusic === "Before I Rise") {
      if (isMiraiTrainMusicPlaying) {
        miraiTrainAudioElement.pause();
        setIsMiraiTrainMusicPlaying(false);
      } else {
        // Pause "Returns" music and reset its state
        const returnsAudioElement = audioRef.current;
        const yumeAudioElement = yumeAudioRef.current;

        if (isYumeMusicPlaying) {
          yumeAudioElement.pause();
          yumeAudioElement.currentTime = 0; // Reset the currentTime
          setIsYumeMusicPlaying(false);
        }
        if (isPlaying) {
          returnsAudioElement.pause();
          returnsAudioElement.currentTime = 0; // Reset the currentTime
          setIsPlaying(false);
        }

        miraiTrainAudioElement.play();
        setIsMiraiTrainMusicPlaying(true);
      }
    }
  };

  return (
    <html lang="en">
      <head>
        <link rel="stylesheet" href="dist/css/yakuhanjp.min.css" />
      </head>
      <body className={inter.className}>
        <div className={`header-nav ${isHamburgerOpen ? "open" : ""}`}>
          <div className="header-nav-wrapper">
            <div className="flex items-center gap-10 flex-col">
              <div className="flex items-center gap-10">
                <Image
                  src={BangDreamLogo}
                  alt="BangDreamLogo"
                  className="w-80 band-dream-logo"
                />
                <div className="grid grid-cols-2 gap-x-2 gap-y-2">
                  {datas.menu.map((menu) => {
                    const isMenuActive = menu.name.toLowerCase() === activeMenu;
                    return (
                      <a
                        href={menu.URL}
                        key={menu.name}
                        className={`nav-header-menu ${
                          isMenuActive ? "active" : ""
                        }`}
                      >
                        <div className="flex items-center gap-6 px-10 py-4 nav-header-menu-container">
                          <div className="nav-header-menu-name">
                            {menu.name}
                          </div>
                          <div className="nav-header-menu-japanese-name">
                            {menu.japanese}
                          </div>
                        </div>
                      </a>
                    );
                  })}
                </div>
              </div>

              <div className="flex items-center justify-center gap-8">
                <div className="text-[#b92b5d]">OFFICIAL SNS</div>
                <div className="flex items-center justify-center gap-4">
                  <a target="_blank" href="https://twitter.com/bang_dream_gbp">
                    <Image
                      src={TwitterIcon}
                      alt="TwitterIcon"
                      className="sns-icon "
                    />
                  </a>
                  <a target="_blank" href="https://page.line.me/fht6793t">
                    <Image
                      src={LineIcon}
                      alt="LineIcon"
                      className="sns-icon w-[20px]"
                    />
                  </a>
                  <a href="https://www.youtube.com/channel/UCN-bFIdJM0gQlgX7h6LKcZA">
                    <Image
                      src={YoutubeIcon}
                      alt="YoutubeIcon"
                      className="sns-icon "
                    />
                  </a>
                </div>
              </div>
            </div>
            <div></div>
          </div>
        </div>
        <div
          className={`music-player-tracklist_wrapper ${
            isMusicTracklistOpen ? "open" : ""
          }`}
          // className={`music-player-tracklist_wrapper `}
        >
          <div className="music-player-tracklist_container show showed">
            <ul className="music-player-tracklist">
              <li
                onClick={togglePlay}
                className={`track_item ${
                  musicPlaying.title === "Returns" ? "active" : ""
                }`}
              >
                <a
                  className="track_link current"
                  id="track-0"
                  href="#"
                  data-song="0"
                >
                  <p className="title">Returns</p>
                  <p className="artist">Poppin Party</p>
                </a>
              </li>
              <li
                onClick={toggleYumeMusicPlay}
                className={`track_item ${
                  musicPlaying.title === "夢を撃ち抜く瞬間に！" ? "active" : ""
                }`}
              >
                <a className="track_link" id="track-1" href="#" data-song="1">
                  <p className="title">夢を撃ち抜く瞬間に！</p>
                  <p className="artist">Poppin Party</p>
                </a>
              </li>
              <li
                onClick={toggleMiraiTrainMusicPlay}
                className={`track_item ${
                  musicPlaying.title === "Before I Rise" ? "active" : ""
                }`}
              >
                <a className="track_link" id="track-2" href="#" data-song="2">
                  <p className="title">Before I Rise</p>
                  <p className="artist">⿇枝 准 x XAI </p>
                </a>
              </li>
              <button
                onClick={handleCloseMusicTracklist}
                className="tracklist_close"
              >
                <div className="close-icon">
                  <span></span>
                  <span></span>
                </div>
              </button>
            </ul>
          </div>
        </div>

        <div className="music-player-container">
          <button
            onClick={() => setIsMusicContainerOpen(!isMusicContainerOpen)}
            className={`navigation ${isMusicContainerOpen ? "show" : ""}`}
          >
            <span className="nav_show">
              <span
                className={`sw-song ${
                  isPlaying || isYumeMusicPlaying || isMiraiTrainMusicPlaying
                    ? "on"
                    : ""
                }`}
              >
                <span></span>
                <span></span>
                <span></span>
                <span></span>
                <span></span>
              </span>
              <span className="text">
                <div>VOCAL</div>
                <div>SONG</div>
              </span>
            </span>
            <div className="close-icon">
              <span></span>
              <span></span>
            </div>
          </button>

          <div
            className={`music-player-navigation ${
              isMusicContainerOpen ? "show" : ""
            }`}
          >
            <div className="music-player-menu">
              <div className="flex items-center justify-around h-[100%]">
                <div className="flex items-center w-[250px] ">
                  <button className="tracklist_open">
                    {/* <div className="tracklist">
                      <span className="flex items-center gap-2">
                        <span className="absolute left-[16px] w-[3px] h-[3px] rounded-full bg-[#b92b5d]  top-[25px]"></span>
                        <span className="absolute  left-[23px] w-4 h-[1px] bg-[#b92b5d] top-[26px]"></span>
                      </span>
                      <span className="flex items-center gap-2 ">
                        <span className="absolute left-[16px] w-[3px] h-[3px] rounded-full bg-[#b92b5d] top-[35px]"></span>
                        <span className="absolute left-[23px]  w-4 h-[1px] bg-[#b92b5d] top-[36px]"></span>
                      </span>
                    </div> */}
                    <Image
                      onClick={handleOpenMusicTracklist}
                      src={MusicTracker}
                      className="tracklist"
                      alt="MusicTracker"
                    />
                  </button>
                  <div className="music-player_title">
                    <div className="tracking-[1px]">{musicPlaying.title}</div>
                    <div className="text-xs">{musicPlaying.artist}</div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <Image
                    onClick={handlePreviousMusic}
                    src={MusicIcon}
                    alt="MusicPrevious"
                    className="rotate-180 cursor-pointer"
                  />
                  {musicPlaying.title === "Returns" ? (
                    <Image
                      onClick={togglePlay}
                      src={isPlaying ? PauseIcon : PlayIcon}
                      alt={isPlaying ? "PauseIcon" : "PlayIcon"}
                      className="w-10 cursor-pointer"
                    />
                  ) : musicPlaying.title === "夢を撃ち抜く瞬間に！" ? (
                    <Image
                      onClick={toggleYumeMusicPlay}
                      src={isYumeMusicPlaying ? PauseIcon : PlayIcon}
                      alt={isYumeMusicPlaying ? "PauseIcon" : "PlayIcon"}
                      className="w-10 cursor-pointer"
                    />
                  ) : (
                    <Image
                      onClick={toggleMiraiTrainMusicPlay}
                      src={isMiraiTrainMusicPlaying ? PauseIcon : PlayIcon}
                      alt={isMiraiTrainMusicPlaying ? "PauseIcon" : "PlayIcon"}
                      className="w-10 cursor-pointer"
                    />
                  )}

                  <Image
                    onClick={handleNextMusic}
                    src={MusicIcon}
                    alt="MusicIcon"
                    className="rotate-360 cursor-pointer"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="side-left-text">BANG DREAM ! GIRLS BAND PARTY !</div>
        <div className="side-right  flex items-center gap-[40px]">
          <div className="side-right-text">SHARE</div>
          <a target="_blank" href="https://twitter.com/bang_dream_gbp">
            <Image className="sns-icon" src={TwitterIcon} alt="TwitterIcon" />
          </a>
          <a target="_blank" href="https://page.line.me/fht6793t">
            <Image
              className="sns-icon w-[20px]"
              src={LineIcon}
              alt="LineIcon"
            />
          </a>
          <a
            target="_blank"
            href="https://www.youtube.com/channel/UCN-bFIdJM0gQlgX7h6LKcZA"
          >
            <Image
              className="sns-icon w-[20px]"
              src={YoutubeIcon}
              alt="YoutubeIcon"
            />
          </a>
          <a
            target="_blank"
            href="https://www.instagram.com/bang_dream_gbp_official/"
          >
            <Image
              className="sns-icon w-[20px]"
              src={InstagramIcon}
              alt="InstagramIcon"
            />
          </a>
        </div>
        <div className="flex justify-end m-4">
          <div
            onClick={() => setIsHamburgerOpen(!isHamburgerOpen)}
            className={`header-hamburger ${isHamburgerOpen ? "open" : ""}`}
          >
            <button className="header-hamburger_button ">
              <span></span>
              <span></span>
              <span></span>
            </button>
          </div>
        </div>
        {/* <audio ref={audioRef} controls className="hidden">
          <source src={mp3File} type="audio/mpeg" />
        </audio>
        <audio ref={yumeAudioRef} controls className="hidden">
          <source src={Yume} type="audio/mpeg" />
        </audio> */}
        <audio ref={miraiTrainAudioRef} controls className="hidden">
          <source src={BeforeIRise} type="audio/mpeg" />
        </audio>
        <Navbar activeMenu={activeMenu} />
        {/* <ul className="lg:flex items-center justify-center gap-20  sm:hidden">
          {datas.menu.map((menu, index) => {
            const isActive = menu.name.toLowerCase() === activeMenu;
            return (
              <li
                key={index}
                className={`menu-container flex items-center justify-center flex-col gap-2 ${
                  isActive ? "active" : ""
                }`}
              >
                <a href={menu.name.toLowerCase()}>
                  <span className="menu-name px-2 ">{menu.name}</span>
                </a>
                <div className="text-[#333] text-[8px]">{menu.japanese}</div>
              </li>
            );
          })}
        </ul> */}
        {children}
      </body>
    </html>
  );
}
